syntax = "proto3";
package multistaking.v1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "multistaking/v1/multi_staking.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "google/api/annotations.proto";

option go_package = "github.com/realiotech/multi-staking/x/multi-staking/types";

// Query defines the gRPC querier service.
service Query {
  rpc MultiStakingLocks(QueryMultiStakingLocksRequest)
      returns (QueryMultiStakingLocksResponse) {
    option (google.api.http).get = "/realiotech/multistaking/v1/locks";
  }
  rpc MultiStakingLock(QueryMultiStakingLockRequest)
      returns (QueryMultiStakingLockResponse) {
    option (google.api.http).get = "/realiotech/multistaking/v1/lock/"
                                   "{validator_address}/{multi_staker_address}";
  }
  rpc MultiStakingUnlocks(QueryMultiStakingUnlocksRequest)
      returns (QueryMultiStakingUnlocksResponse) {
    option (google.api.http).get = "/realiotech/multistaking/v1/unlocks";
  }
  rpc MultiStakingUnlock(QueryMultiStakingUnlockRequest)
      returns (QueryMultiStakingUnlockResponse) {
    option (google.api.http).get = "/realiotech/multistaking/v1/unlock/"
                                   "{validator_address}/{multi_staker_address}";
  }
  rpc ValidatorMultiStakingCoin(QueryValidatorMultiStakingCoinRequest)
      returns (QueryValidatorMultiStakingCoinResponse) {
    option (google.api.http).get =
        "/realiotech/multistaking/v1/validator-coin/{validator_addr}";
  }
  rpc MultiStakingCoinInfos(QueryMultiStakingCoinInfosRequest)
      returns (QueryMultiStakingCoinInfosResponse) {
    option (google.api.http).get = "/realiotech/multistaking/v1/coin-infos";
  }
  rpc BondWeight(QueryBondWeightRequest) returns (QueryBondWeightResponse) {
    option (google.api.http).get = "/realiotech/multistaking/v1/weight/{denom}";
  }
  rpc Validators(QueryValidatorsRequest) returns (QueryValidatorsResponse) {
    option (google.api.http).get = "/realiotech/multistaking/v1/validators";
  }
  rpc Validator(QueryValidatorRequest) returns (QueryValidatorResponse) {
    option (google.api.http).get =
        "/realiotech/multistaking/v1/validators/{validator_addr}";
  }
}

message QueryMultiStakingLocksRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryMultiStakingLocksResponse {
  repeated MultiStakingLock locks = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryMultiStakingLockRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  string multi_staker_address = 1
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string validator_address = 2
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

message QueryMultiStakingLockResponse {
  MultiStakingLock lock = 1;
  bool found = 2;
}

message QueryMultiStakingUnlocksRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryMultiStakingUnlocksResponse {
  repeated MultiStakingUnlock unlocks = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryMultiStakingUnlockRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  string multi_staker_address = 1
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string validator_address = 2
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

message QueryMultiStakingUnlockResponse {
  MultiStakingUnlock unlock = 1;
  bool found = 2;
}

message QueryMultiStakingCoinInfosRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryMultiStakingCoinInfosResponse {
  repeated MultiStakingCoinInfo infos = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryBondWeightRequest { string denom = 1; }

message QueryBondWeightResponse {
  string weight = 1 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];

  bool found = 2;
}

message QueryValidatorMultiStakingCoinRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  string validator_addr = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

message QueryValidatorMultiStakingCoinResponse { string denom = 1; }

message QueryValidatorsRequest {
  string status = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryValidatorsResponse {
  repeated ValidatorInfo validators = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryValidatorRequest {
  string validator_addr = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

message QueryValidatorResponse {
  ValidatorInfo validator = 1 [ (gogoproto.nullable) = false ];
}
